---
- name: Install_tomcat
  hosts: ubuntu
  become: yes
  tasks:
    - name: is it running on ubuntu
      ansible.builtin.fail:
        msg: "This runs only on ubuntu distributions"
      when: ansible_facts[ 'distribution' ] !=ubuntu
    - name: install openjdk-17-jdk
      ansible.builtin.apt:
       name: "{{ java_package }}"
       state: present
       update_cache: yes
    - name: create_group_tomcat
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present       
    - name: create user tomcat
      ansible.builtin.user:
       name: "{{ user_name }}"
       state: present
       home: "{{ home_dir }}"
       group: "{{ group_name }}"
       shell: "{{ default_shell }}"
    - name: check before extract
      ansible.builtin.stat:
        path: "{{ home_dir }}"
      register: check_tomcatfolder_exists
    - name: Display all variables/facts known for a host
      ansible.builtin.debug:
          var: check_tomcatfolder_exists.stat.exists
    - name: download_tomcat
      ansible.builtin.get_url:
        url: "https://downloads.apache.org/tomcat/tomcat-10/v{{ download_Version }}/bin/apache-tomcat-{{ download_Version }}.tar.gz"
        dest: "{{ download_path }}"
        owner: "{{ user_name }}"
      when: not check_tomcatfolder_exists.stat.exists
    - name: unarchieve
      ansible.builtin.unarchive:
        src: "{{ download_path }}/apache-tomcat-{{ download_Version }}.tar.gz"
        dest: "{{ home_dir }}"
      when: not check_tomcatfolder_exists.stat.exists
    - name: Create Sym-link
      ansible.builtin.file:
        state: link
        src: "{{ home_dir }}"
        dest: "{{ tomcat_symlink }}"
      when: not check_tomcatfolder_exists.stat.exists
    - name: change ownership
      ansible.builtin.file:
       state: directory
       recurse: yes 
       path: "{{ home_dir }}"
       owner: "{{ user_name }}"
       group: "{{ group_name }}"
      when: not check_tomcatfolder_exists.stat.exists
      notify:
        - give execute Permissions
    - name: create service file
      ansible.builtin.template:
       src: ~/Ansible_Practise/tomcat.service.j2
       dest: /etc/systemd/system/tomcat.service
    - name: restart systemd
      ansible.builtin.systemd:
       name: tomcat.service
       state: started
       enabled: yes
    - name: copy files
      ansible.builtin.copy:
       src: "{{ item.src }}" 
       dest: "{{ item.dest }}"
      loop:
        - {  src: ~/Ansible_Practise/tomcat-users.xml.j2, dest: "{{ home_dir }}/apache-tomcat-{{ download_Version }}/conf/tomcat-users.xml" }
        - {  src: ~/Ansible_Practise/manager-context.xml, dest: "{{ home_dir }}/apache-tomcat-{{ download_Version }}/webapps/manager/META-INF/context.xml" }
        - {  src: ~/Ansible_Practise/hostmanager-context.xml, dest: "{{ home_dir }}/apache-tomcat-{{ download_Version }}/webapps/host-manager/META-INF/context.xml" }
      notify:
         - restart tomcat.service
    # - name: restart systemd
    #   ansible.builtin.systemd:
    #    name: tomcat.service
    #    state: started
    #    enabled: yes
  handlers:
    - name: restart tomcat.service
      ansible.builtin.systemd:
        name: tomcat.service
        state: restarted
    - name: give execute Permissions
      ansible.builtin.shell:
       cmd: 'chmod +x {{ home_dir }}/apache-tomcat-{{ download_Version }}/bin/*.sh'
       executable: "/bin/bash"  
    
    

        
       



  
  
  



